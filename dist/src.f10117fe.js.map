{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;ADAA,IAAA,QAAA;ACEA,ADFA,ICEM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAJ,CACf,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CADe,CAAjB;AAIA,ADNA,QCMQ,CAAC,GDNT,GCMA;AAEA,ADNE,OCMK,CAAC,GAAR,ADNE,CCMU,OAAZ,ADNE,CAAmB,MAAnB,EAAkC;AAAf,SAAA,MAAA,GAAA,MAAA;AAAmB;;AAEtC,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO;AACL,sBAAgB,KAAK,aADhB;AAEL,uBAAiB,KAAK;AAFjB,KAAP;AAID,GALD;;AAOA,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACD,GAFD;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACD,GAFD;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,kHAAP;AAOD,GARD;;AAUA,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAAqC;AACnC,QAAM,SAAS,GAAG,KAAK,QAAL,EAAlB;;mCAEQ,UAAQ;AACR,UAAA,EAAA,GAAwB,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAxB;AAAA,UAAC,SAAS,GAAA,EAAA,CAAA,CAAA,CAAV;AAAA,UAAY,QAAQ,GAAA,EAAA,CAAA,CAAA,CAApB;;AAEN,MAAA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,OAApC,CAA4C,UAAA,OAAA,EAAO;AACjD,QAAA,OAAO,CAAC,gBAAR,CAAyB,SAAzB,EAAoC,SAAS,CAAC,QAAD,CAA7C;AACD,OAFD;;;AAHF,SAAI,IAAI,QAAR,IAAoB,SAApB,EAA6B;cAArB;AAMP;AACF,GAVD;;AAYA,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,eAAe,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAxB;AACA,IAAA,eAAe,CAAC,SAAhB,GAA4B,KAAK,QAAL,EAA5B;AAEA,SAAK,UAAL,CAAgB,eAAe,CAAC,OAAhC;AAEA,SAAK,MAAL,CAAY,MAAZ,CAAmB,eAAe,CAAC,OAAnC;AACD,GAPD;;AAQF,SAAA,QAAA;AAjDA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\n\n  constructor(public parent: Element) {}\n\n  eventMap(): {[key: string]: () => void} {\n    return {\n      'click:button': this.onButtonClick,\n      'mouseenter:h1': this.onHeaderHover,\n    }\n  }\n\n  onButtonClick(): void {\n    console.log('Clicked');\n  }\n\n  onHeaderHover(): void {\n    console.log('Hovered');\n  }\n\n  template(): string {\n    return `\n      <div>\n        <h1>User Form</h1>\n        <input />\n        <button>Click</button>\n      </div>\n    `;\n  }\n\n  bindEvents(fragment: DocumentFragment): void {\n    const eventsMap = this.eventMap();\n\n    for(let eventKey in eventsMap) {\n      const [eventName, selector] = eventKey.split(':');\n\n      fragment.querySelectorAll(selector).forEach(element => {\n        element.addEventListener(eventName, eventsMap[eventKey]);\n      })\n    }\n  }\n\n  render(): void {\n    const templateElement = document.createElement('template');\n    templateElement.innerHTML = this.template();\n\n    this.bindEvents(templateElement.content);\n\n    this.parent.append(templateElement.content);\n  }\n}","import {UserForm} from './views/UserForm';\n\nconst userForm = new UserForm(\n  document.getElementById('root')\n);\n\nuserForm.render();\n\nconsole.log('works');"]}